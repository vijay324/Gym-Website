{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\S.Vijay Kumar\\\\Downloads\\\\project_fitness_app-main\\\\src\\\\components\\\\Exercises.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Pagination from '@mui/material/Pagination';\nimport { Box, Stack, Typography } from '@mui/material';\nimport { exerciseOptions, fetchData } from '../utils/fetchData';\nimport ExerciseCard from './ExerciseCard';\nimport Loader from './Loader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Exercises = _ref => {\n  _s();\n\n  let {\n    exercises,\n    setExercises,\n    bodyPart\n  } = _ref;\n  const [currentPage, setCurrentPage] = useState(1);\n  const [exercisesPerPage] = useState(6);\n  useEffect(() => {\n    const fetchExercisesData = async () => {\n      let exercisesData = [];\n\n      if (bodyPart === 'all') {\n        exercisesData = await fetchData('https://exercisedb.p.rapidapi.com/exercises', exerciseOptions);\n      } else {\n        exercisesData = await fetchData(`https://exercisedb.p.rapidapi.com/exercises/bodyPart/${bodyPart}`, exerciseOptions);\n      }\n\n      setExercises(exercisesData);\n    };\n\n    fetchExercisesData();\n  }, [bodyPart]); // Pagination\n\n  const indexOfLastExercise = currentPage * exercisesPerPage;\n  const indexOfFirstExercise = indexOfLastExercise - exercisesPerPage;\n  const currentExercises = exercises.slice(indexOfFirstExercise, indexOfLastExercise);\n\n  const paginate = (event, value) => {\n    setCurrentPage(value);\n    window.scrollTo({\n      top: 1800,\n      behavior: 'smooth'\n    });\n  };\n\n  if (!currentExercises.length) return /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 40\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    id: \"exercises\",\n    sx: {\n      mt: {\n        lg: '109px'\n      }\n    },\n    mt: \"50px\",\n    p: \"20px\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      fontWeight: \"bold\",\n      sx: {\n        fontSize: {\n          lg: '44px',\n          xs: '30px'\n        }\n      },\n      mb: \"46px\",\n      children: \"Showing Results\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      sx: {\n        gap: {\n          lg: '107px',\n          xs: '50px'\n        }\n      },\n      flexWrap: \"wrap\",\n      justifyContent: \"center\",\n      children: currentExercises.map((exercise, idx) => /*#__PURE__*/_jsxDEV(ExerciseCard, {\n        exercise: exercise\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      sx: {\n        mt: {\n          lg: '114px',\n          xs: '70px'\n        }\n      },\n      alignItems: \"center\",\n      children: exercises.length > 9 && /*#__PURE__*/_jsxDEV(Pagination, {\n        color: \"standard\",\n        shape: \"rounded\",\n        defaultPage: 1,\n        count: Math.ceil(exercises.length / exercisesPerPage),\n        page: currentPage,\n        onChange: paginate,\n        size: \"large\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Exercises, \"qc/w78Pbe1Hwe7FZOf3usGVulUM=\");\n\n_c = Exercises;\nexport default Exercises;\n\nvar _c;\n\n$RefreshReg$(_c, \"Exercises\");","map":{"version":3,"sources":["C:/Users/S.Vijay Kumar/Downloads/project_fitness_app-main/src/components/Exercises.js"],"names":["React","useEffect","useState","Pagination","Box","Stack","Typography","exerciseOptions","fetchData","ExerciseCard","Loader","Exercises","exercises","setExercises","bodyPart","currentPage","setCurrentPage","exercisesPerPage","fetchExercisesData","exercisesData","indexOfLastExercise","indexOfFirstExercise","currentExercises","slice","paginate","event","value","window","scrollTo","top","behavior","length","mt","lg","fontSize","xs","gap","map","exercise","idx","Math","ceil"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Pagination from '@mui/material/Pagination';\nimport { Box, Stack, Typography } from '@mui/material';\n\nimport { exerciseOptions, fetchData } from '../utils/fetchData';\nimport ExerciseCard from './ExerciseCard';\nimport Loader from './Loader';\n\nconst Exercises = ({ exercises, setExercises, bodyPart }) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [exercisesPerPage] = useState(6);\n\n  useEffect(() => {\n    const fetchExercisesData = async () => {\n      let exercisesData = [];\n\n      if (bodyPart === 'all') {\n        exercisesData = await fetchData('https://exercisedb.p.rapidapi.com/exercises', exerciseOptions);\n      } else {\n        exercisesData = await fetchData(`https://exercisedb.p.rapidapi.com/exercises/bodyPart/${bodyPart}`, exerciseOptions);\n      }\n\n      setExercises(exercisesData);\n    };\n\n    fetchExercisesData();\n  }, [bodyPart]);\n\n  // Pagination\n  const indexOfLastExercise = currentPage * exercisesPerPage;\n  const indexOfFirstExercise = indexOfLastExercise - exercisesPerPage;\n  const currentExercises = exercises.slice(indexOfFirstExercise, indexOfLastExercise);\n\n  const paginate = (event, value) => {\n    setCurrentPage(value);\n\n    window.scrollTo({ top: 1800, behavior: 'smooth' });\n  };\n\n  if (!currentExercises.length) return <Loader />;\n\n  return (\n    <Box id=\"exercises\" sx={{ mt: { lg: '109px' } }} mt=\"50px\" p=\"20px\">\n      <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ fontSize: { lg: '44px', xs: '30px' } }} mb=\"46px\">Showing Results</Typography>\n      <Stack direction=\"row\" sx={{ gap: { lg: '107px', xs: '50px' } }} flexWrap=\"wrap\" justifyContent=\"center\">\n        {currentExercises.map((exercise, idx) => (\n          <ExerciseCard key={idx} exercise={exercise} />\n        ))}\n      </Stack>\n      <Stack sx={{ mt: { lg: '114px', xs: '70px' } }} alignItems=\"center\">\n        {exercises.length > 9 && (\n          <Pagination\n            color=\"standard\"\n            shape=\"rounded\"\n            defaultPage={1}\n            count={Math.ceil(exercises.length / exercisesPerPage)}\n            page={currentPage}\n            onChange={paginate}\n            size=\"large\"\n          />\n        )}\n      </Stack>\n    </Box>\n  );\n};\n\nexport default Exercises;\n\n"]},"metadata":{},"sourceType":"module"}