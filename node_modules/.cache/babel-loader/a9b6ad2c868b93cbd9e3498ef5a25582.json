{"ast":null,"code":"import _slicedToArray from \"C:/Users/S.Vijay Kumar/Downloads/project_fitness_app-main/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  var valueRef = React.useRef(value);\n  valueRef.current = value;\n  var onValueChangeRef = React.useRef(onValueChange);\n  React.useEffect(function () {\n    onValueChangeRef.current = onValueChange;\n  }, [onValueChange]);\n  var onHighlightChangeRef = React.useRef(onHighlightChange);\n  React.useEffect(function () {\n    onHighlightChangeRef.current = onHighlightChange;\n  }, [onHighlightChange]);\n  React.useEffect(function () {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur; // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n\n\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(function () {\n    var _onHighlightChangeRef; // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n\n\n    (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, state.highlightedValue);\n  }, [state.highlightedValue]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var controlledValue = props.value,\n      defaultValue = props.defaultValue,\n      onValueChange = props.onChange,\n      onHighlightChange = props.onHighlightChange,\n      options = props.options,\n      optionComparer = props.optionComparer;\n  var propsRef = React.useRef(props);\n  propsRef.current = props;\n\n  var _useControlled = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValueState = _useControlled2[1];\n\n  var previousValueRef = React.useRef(null);\n\n  var _React$useReducer = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedValue: null,\n    selectedValue: value\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  var optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(function () {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setValue,\n      value: controlledValue\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}","map":{"version":3,"sources":["C:/Users/S.Vijay Kumar/Downloads/project_fitness_app-main/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js"],"names":["React","unstable_useControlled","useControlled","ActionTypes","areArraysEqual","useReducerReturnValueHandler","state","value","options","optionComparer","setValueState","onValueChange","onHighlightChange","valueRef","useRef","current","onValueChangeRef","useEffect","onHighlightChangeRef","Array","isArray","selectedValue","_onValueChangeRef$cur","call","_onHighlightChangeRef","highlightedValue","useControllableReducer","internalReducer","externalReducer","props","controlledValue","defaultValue","onChange","propsRef","controlled","default","name","previousValueRef","useReducer","dispatch","optionComparerRef","undefined","type","setValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { unstable_useControlled as useControlled } from '@mui/utils';\nimport { ActionTypes } from './useListbox.types';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\nfunction useReducerReturnValueHandler(state, value, options, optionComparer, setValueState, onValueChange, onHighlightChange) {\n  const valueRef = React.useRef(value);\n  valueRef.current = value;\n  const onValueChangeRef = React.useRef(onValueChange);\n  React.useEffect(() => {\n    onValueChangeRef.current = onValueChange;\n  }, [onValueChange]);\n  const onHighlightChangeRef = React.useRef(onHighlightChange);\n  React.useEffect(() => {\n    onHighlightChangeRef.current = onHighlightChange;\n  }, [onHighlightChange]);\n  React.useEffect(() => {\n    if (Array.isArray(state.selectedValue)) {\n      if (areArraysEqual(state.selectedValue, valueRef.current)) {\n        return;\n      }\n    } else if (state.selectedValue == null && valueRef.current == null || state.selectedValue != null && valueRef.current != null && optionComparer.current(state.selectedValue, valueRef.current)) {\n      return;\n    }\n\n    setValueState(state.selectedValue);\n\n    if (state.selectedValue != null) {\n      var _onValueChangeRef$cur;\n\n      // @ts-ignore We know that selectedValue has the correct type depending on `selectMultiple` prop.\n      (_onValueChangeRef$cur = onValueChangeRef.current) == null ? void 0 : _onValueChangeRef$cur.call(onValueChangeRef, state.selectedValue);\n    }\n  }, [state.selectedValue, setValueState, optionComparer]);\n  React.useEffect(() => {\n    var _onHighlightChangeRef;\n\n    // Fire the highlightChange event when reducer returns changed `highlightedIndex`.\n    (_onHighlightChangeRef = onHighlightChangeRef.current) == null ? void 0 : _onHighlightChangeRef.call(onHighlightChangeRef, state.highlightedValue);\n  }, [state.highlightedValue]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  const {\n    value: controlledValue,\n    defaultValue,\n    onChange: onValueChange,\n    onHighlightChange,\n    options,\n    optionComparer\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const [value, setValueState] = useControlled({\n    controlled: controlledValue,\n    default: defaultValue,\n    name: 'useListbox'\n  });\n  const previousValueRef = React.useRef(null);\n  const [state, dispatch] = React.useReducer(externalReducer != null ? externalReducer : internalReducer, {\n    highlightedValue: null,\n    selectedValue: value\n  });\n  const optionComparerRef = React.useRef(optionComparer);\n  optionComparerRef.current = optionComparer;\n  React.useEffect(() => {\n    // Detect external changes to the controlled `value` prop and update the state.\n    if (controlledValue === undefined) {\n      return;\n    }\n\n    if (Array.isArray(controlledValue) && Array.isArray(previousValueRef.current) && areArraysEqual(previousValueRef.current, controlledValue, optionComparerRef.current)) {\n      // `value` is an array and it did not change.\n      return;\n    }\n\n    if (!Array.isArray(controlledValue) && controlledValue != null && previousValueRef.current != null && optionComparerRef.current(controlledValue, previousValueRef.current)) {\n      // `value` is a single option and it did not change.\n      return;\n    }\n\n    previousValueRef.current = controlledValue;\n    dispatch({\n      type: ActionTypes.setValue,\n      value: controlledValue\n    });\n  }, [controlledValue]);\n  useReducerReturnValueHandler(state, value, options, optionComparerRef, setValueState, onValueChange, onHighlightChange);\n  return [state, dispatch];\n}"]},"metadata":{},"sourceType":"module"}